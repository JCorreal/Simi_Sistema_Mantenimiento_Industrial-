CREATE DATABASE SIMIDB CHARACTER SET utf8 COLLATE utf8_general_ci;

CREATE TABLE tbl_respaldo (
  RESPALDO_ID int(11) NOT NULL PRIMARY KEY AUTO_INCREMENT COMMENT 'Llave Primaria para la estructura',
  EQUIPO_ID int(4) NOT NULL COMMENT 'Identificador del Equipo - Maquinaria',
  OPERARIO_ID int(11) NOT NULL COMMENT 'Identificador del Operario',
  FECHA date NOT NULL COMMENT 'Fecha en que se program칩 el mantenimiento',
  OBSERVACIONES varchar(255) DEFAULT NULL COMMENT 'Alguna observacion relacionada con el mantenimiento implicado',
  INGRESADOPOR int(4) DEFAULT NULL COMMENT 'Usuario que crea el registro para control de auditoria',
  MODIFICADOPOR int(4) DEFAULT NULL COMMENT 'Usuario que modifica el registro para control de auditoria',
  FECHAINGRESO timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Fecha en en que se crea el registro',
  FECHAMODIFICACION timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Fecha en en que se modifica el registro'   
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COMMENT='Estructura que almacenara toda la informacion relacionada con el historico de mantenimientos';

CREATE TABLE tbl_listavalores (
  LISTAVALORES_ID int(4) NOT NULL PRIMARY KEY AUTO_INCREMENT COMMENT  'Llave Primaria para la estructura',
  NOMBRE varchar(50) NOT NULL COMMENT 'Nombre que dentifica univocamente cada marca y linea',
  DESCRIPCION varchar(255) DEFAULT NULL COMMENT 'Alguna descripcion opcionla para las marcas y lineas',
  TIPO varchar(50) NOT NULL COMMENT 'Distingue si se trata de Lineas o Marcas',
  INGRESADOPOR int(4) DEFAULT NULL COMMENT 'Usuario que crea el registro para control de auditoria',
  MODIFICADOPOR int(4) DEFAULT NULL COMMENT 'Usuario que modifica el registro para control de auditoria',
  FECHAINGRESO timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Fecha en en que se crea el registro',
  FECHAMODIFICACION timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Fecha en en que se modifica el registro',
  CONSTRAINT CHK_Tipo CHECK (TIPO IN('MARCAS','LINEAS'))
 ) ENGINE=InnoDB DEFAULT CHARSET=latin1 COMMENT='Estructura que almacenara toda la informacion relacionada con lineas y marcas';

CREATE TABLE tbl_operarios (
  OPERARIO_ID int(4) NOT NULL PRIMARY KEY AUTO_INCREMENT COMMENT 'Llave Primaria para la estructura',
  DOCUMENTO varchar(10) NOT NULL UNIQUE COMMENT 'Documento de identificacion del Operario',
  NOMBRES varchar(25) NOT NULL COMMENT 'Son los nombres del Operario',
  APELLIDOS varchar(25) NOT NULL COMMENT 'Son los apellidos del Operario',
  TELEFONO varchar(10) NOT NULL COMMENT 'Es el numero de telefono fijo o movil del Operario',
  CORREO varchar(50) DEFAULT NULL COMMENT 'Es el email o correo electronico del Operario',
  CLAVE tinyblob NOT NULL COMMENT 'Es la clave de acceso al sistema para el Operario',
  PERFIL int(1) NOT NULL DEFAULT '3' COMMENT 'Es el nivel de permisos sobre el sistema para el Operario',
  FOTO varchar(15) DEFAULT NULL COMMENT 'Fotografia opcional del Operario',
  INGRESADOPOR int(4) DEFAULT NULL COMMENT 'Usuario que crea el registro para control de auditoria',
  MODIFICADOPOR int(4) DEFAULT NULL COMMENT 'Usuario que modifica el registro para control de auditoria',
  FECHAINGRESO timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Fecha en en que se crea el registro',
  FECHAMODIFICACION timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Fecha en en que se modifica el registro' 
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COMMENT='Estructura que almacenara toda la informaci칩n relacionada con los operarios';

CREATE TABLE tbl_equipos (
  EQUIPO_ID int(4) NOT NULL PRIMARY KEY AUTO_INCREMENT COMMENT 'Llave Primaria para la estructura',
  NOMBRE_EQUIPO varchar(50) NOT NULL COMMENT 'Nombre que identifica el Equipo - Maquinaria',
  MARCA int(4) NOT NULL COMMENT 'Codigo que identifica la marca asociada al Equipo - Maquinaria',
  SERIE varchar(20) NOT NULL UNIQUE COMMENT 'Serie unica para cada Equipo - Maquinaria suministrada por el fabricante',
  LINEA int(4) NOT NULL COMMENT 'Codigo que identifica la linea a la que pertenece el Equipo - Maquinaria',
  LUBRICACION int(1) DEFAULT 0 COMMENT 'Indicador que tendr치 valores de 1 y 0 para identificar que el Equipo - Maquinaria requiere lubricacion y por ende labores de programacion de mantenimiento',
  INGRESADOPOR int(4) DEFAULT NULL COMMENT 'Usuario que crea el registro para control de auditoria',
  MODIFICADOPOR int(4) DEFAULT NULL COMMENT 'Usuario que modifica el registro para control de auditoria',
  FECHAINGRESO timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Fecha en en que se crea el registro',
  FECHAMODIFICACION timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Fecha en en que se modifica el registro',
  CONSTRAINT FK_LINEA FOREIGN KEY(LINEA)REFERENCES TBL_LISTAVALORES (LISTAVALORES_ID),
  CONSTRAINT FK_MARCA FOREIGN KEY(MARCA)REFERENCES TBL_LISTAVALORES (LISTAVALORES_ID)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COMMENT='Usuario que modifica el registro para control de auditoria';

CREATE TABLE tbl_mantenimiento (
  MANTENIMIENTO_ID int(11) NOT NULL PRIMARY KEY AUTO_INCREMENT COMMENT 'Llave Primaria para la estructura',
  EQUIPO_ID int(4) NOT NULL UNIQUE COMMENT 'Identificador del Equipo - Maquinaria',
  OPERARIO_ID int(11) NOT NULL COMMENT 'Identificador del Operario',
  FECHA date NOT NULL COMMENT 'Fecha en que se program칩 el mantenimiento',
  OBSERVACIONES varchar(255) DEFAULT NULL COMMENT 'Alguna observacion relacionada con el mantenimiento implicado',
  INGRESADOPOR int(4) DEFAULT NULL COMMENT 'Usuario que crea el registro para control de auditoria',
  MODIFICADOPOR int(4) DEFAULT NULL COMMENT 'Usuario que modifica el registro para control de auditoria',
  FECHAINGRESO timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Fecha en en que se crea el registro',
  FECHAMODIFICACION timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Fecha en en que se modifica el registro',
  UNIQUE KEY OPERARIO (OPERARIO_ID,FECHA),
  CONSTRAINT FK_EQUIPO_ID FOREIGN KEY (EQUIPO_ID) REFERENCES tbl_equipos (EQUIPO_ID),
  CONSTRAINT FK_OPERARIO_ID FOREIGN KEY (OPERARIO_ID) REFERENCES tbl_operarios (OPERARIO_ID)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COMMENT='Estructura que almacenara toda la informacion relacionada con las programaciones de mantenimiento a los diferentes equipos';

INSERT INTO TBL_OPERARIOS(DOCUMENTO, NOMBRES, APELLIDOS, TELEFONO, CORREO, CLAVE, PERFIL, INGRESADOPOR, MODIFICADOPOR) 
VALUES ('123456', 'Admin', 'Admin', '1234567', 'correo@yahoo.com', AES_ENCRYPT(123456, 'simi2020'), 1, 1, 1);

INSERT INTO TBL_OPERARIOS(DOCUMENTO, NOMBRES, APELLIDOS, TELEFONO, CORREO, CLAVE, FOTO, INGRESADOPOR, MODIFICADOPOR) 
VALUES ('32499321', 'Valentina', 'Otero', '3108971480', 'valen_oter@gmail.com', AES_ENCRYPT(324993, 'simi2020'), '32499321.jpg', 1, 1);

INSERT INTO TBL_OPERARIOS(DOCUMENTO, NOMBRES, APELLIDOS, TELEFONO, CORREO, CLAVE, FOTO,  INGRESADOPOR, MODIFICADOPOR) 
VALUES ('43633198', 'Patricia', 'Jaramillo', '3208971520', 'patri@hotmail.com', AES_ENCRYPT(436331, 'simi2020'), '43633198.jpg', 1, 1);

INSERT INTO TBL_OPERARIOS(DOCUMENTO, NOMBRES, APELLIDOS, TELEFONO, CORREO, CLAVE, FOTO, INGRESADOPOR, MODIFICADOPOR) 
VALUES ('71675402', 'Oscar', 'Gallardo', '3008971983', 'ocgal@yahoo.com', AES_ENCRYPT(716754, 'simi2020'), '71675402.jpg', 1, 1);

INSERT INTO TBL_OPERARIOS(DOCUMENTO, NOMBRES, APELLIDOS, TELEFONO, CORREO, CLAVE, FOTO, INGRESADOPOR, MODIFICADOPOR) 
VALUES ('71685009', 'Felipe', 'Giraldo', '3108971252', 'fepeg@yahoo.com', AES_ENCRYPT(716850, 'simi2020'), '71685009.jpg', 1, 1);

INSERT INTO TBL_OPERARIOS(DOCUMENTO, NOMBRES, APELLIDOS, TELEFONO, CORREO, CLAVE, FOTO, INGRESADOPOR, MODIFICADOPOR) 
VALUES ('98375421', 'Juan', 'Villareal', '3168971787', 'juan_villa@yahoo.com', AES_ENCRYPT(983754, 'simi2020'), '98375421.jpg', 1, 1);

INSERT INTO TBL_OPERARIOS(DOCUMENTO, NOMBRES, APELLIDOS, TELEFONO, CORREO, CLAVE, FOTO, INGRESADOPOR, MODIFICADOPOR) 
VALUES ('98490355', 'Jorge', 'Carrillo', '3108971412', 'jorgeca@yahoo.es', AES_ENCRYPT(984903, 'simi2020'), '98490355.jpg', 1, 1);

INSERT INTO TBL_LISTAVALORES(NOMBRE,TIPO,DESCRIPCION,INGRESADOPOR,MODIFICADOPOR) VALUES('SIEMENS','MARCAS','PROVEEDOR SIEMENS',1,1);
INSERT INTO TBL_LISTAVALORES(NOMBRE,TIPO,DESCRIPCION,INGRESADOPOR,MODIFICADOPOR) VALUES('RICOH','MARCAS','PROVEEDOR RICOH',1,1);
INSERT INTO TBL_LISTAVALORES(NOMBRE,TIPO,DESCRIPCION,INGRESADOPOR,MODIFICADOPOR) VALUES('ACABADOS','LINEAS','PLANTA DE ACABADOS',1,1);
INSERT INTO TBL_LISTAVALORES(NOMBRE,TIPO,DESCRIPCION,INGRESADOPOR,MODIFICADOPOR) VALUES('ENSAMBLE','LINEAS','PLANTA DE ENSAMBLE',1,1);

INSERT INTO TBL_EQUIPOS (NOMBRE_EQUIPO,MARCA,SERIE,LINEA,LUBRICACION,INGRESADOPOR,MODIFICADOPOR) VALUES ('EQUIPO DESPALETIZADOR',1,'EDPA2045',3,1,1,1);
INSERT INTO TBL_EQUIPOS (NOMBRE_EQUIPO,MARCA,SERIE,LINEA,LUBRICACION,INGRESADOPOR,MODIFICADOPOR) VALUES ('EQUIPO DESPRESURIZADOR',2,'EDPU2087',4,1, 1,1);

 
CREATE PROCEDURE SPR_D_Registro(
 IN  p_TABLA        VARCHAR(20),
 IN  p_CONDICION    INT(4),
 OUT p_RESULTADO    tinyint(1))
BEGIN
      DECLARE v_DatoExiste varchar(50) DEFAULT NULL;
      DECLARE CURVACIO	 INT DEFAULT 0;

      DECLARE Cur_Mantenimiento1 CURSOR FOR
      SELECT OPERARIO_ID
      FROM   TBL_MANTENIMIENTO
      WHERE  OPERARIO_ID = p_CONDICION LIMIT 1;
      
      DECLARE Cur_Mantenimiento2 CURSOR FOR
      SELECT OPERARIO_ID
      FROM   TBL_MANTENIMIENTO
      WHERE  EQUIPO_ID  = p_CONDICION;
      
      DECLARE Cur_Equipos1 CURSOR FOR
      SELECT LINEA
      FROM   TBL_EQUIPOS
      WHERE  LINEA  = p_CONDICION LIMIT 1;
      
      DECLARE Cur_Equipos2 CURSOR FOR
      SELECT MARCA
      FROM   TBL_EQUIPOS
      WHERE  MARCA  = p_CONDICION LIMIT 1;

      DECLARE CONTINUE HANDLER FOR NOT FOUND SET CURVACIO = 1;
      DECLARE EXIT HANDLER FOR SQLEXCEPTION SET p_RESULTADO = 2;
     
      SET p_RESULTADO = 0;

      IF(p_TABLA = 'TBL_OPERARIOS') THEN
         SET CURVACIO = 0;
	       OPEN Cur_Mantenimiento1;
		     FETCH Cur_Mantenimiento1 INTO v_DatoExiste;
		     CLOSE Cur_Mantenimiento1;
         IF (v_DatoExiste IS NOT NULL) THEN
             SET p_RESULTADO = 1;
         ELSE
             DELETE FROM TBL_OPERARIOS WHERE OPERARIO_ID = p_CONDICION;
         END IF;		 
      ELSEIF (p_TABLA = 'TBL_EQUIPOS')  THEN              
              SET CURVACIO = 0;	       
	            OPEN Cur_Mantenimiento2;
			        FETCH Cur_Mantenimiento2 INTO v_DatoExiste;
			        CLOSE Cur_Mantenimiento2;
              IF (v_DatoExiste IS NOT NULL) THEN
                  SET p_RESULTADO = 1;
              ELSE    
                   DELETE FROM TBL_EQUIPOS WHERE EQUIPO_ID = p_CONDICION;
              END IF;		 
      ELSEIF (p_TABLA = 'TBL_LISTAVALORES' ) THEN
              SET CURVACIO = 0;
	            OPEN Cur_Equipos1;
			        FETCH Cur_Equipos1 INTO v_DatoExiste;
			        CLOSE Cur_Equipos1;
              IF (v_DatoExiste IS NOT NULL) THEN
                  SET p_RESULTADO = 1;		     	 
              ELSE
                  OPEN Cur_Equipos2;
                  FETCH Cur_Equipos2 INTO v_DatoExiste;
                  CLOSE Cur_Equipos2;
                  IF (v_DatoExiste IS NOT NULL) THEN
                      SET p_RESULTADO = 1;		     	 
                  ELSE
                       DELETE FROM TBL_LISTAVALORES WHERE LISTAVALORES_ID = p_CONDICION;
              	  END IF;	 
			 END IF;		 
      ELSEIF (p_TABLA = 'TBL_MANTENIMIENTO') THEN
              INSERT INTO TBL_RESPALDO(EQUIPO_ID,
                                       OPERARIO_ID,
                                       FECHA,
                                       OBSERVACIONES,
                                       INGRESADOPOR,
                                       MODIFICADOPOR,
                                       FECHAINGRESO,
                                       FECHAMODIFICACION)
                                       SELECT
                                       EQUIPO_ID,
                                       OPERARIO_ID,
                                       FECHA,
                                       OBSERVACIONES,
                                       INGRESADOPOR,
                                       MODIFICADOPOR,
                                       FECHAINGRESO,
                                       FECHAMODIFICACION
                                       FROM TBL_MANTENIMIENTO
                                       WHERE MANTENIMIENTO_ID = p_CONDICION; 
             DELETE FROM TBL_MANTENIMIENTO WHERE MANTENIMIENTO_ID = p_CONDICION;             
      END IF;

      
      COMMIT;      
      
END; 

CREATE PROCEDURE SPR_IU_Equipos(
IN  p_EQUIPO_ID             INT(4),
IN  p_NOMBRE_EQUIPO         VARCHAR(50),
IN  p_MARCA          INT(4),
IN  p_SERIE                 VARCHAR(20),
IN  p_LINEA          INT(4),
IN  p_LUBRICACION           INT(1),
IN  p_USUARIOCONECTADO      INT(4),
OUT p_RESULTADO             tinyint(1))
BEGIN
     DECLARE v_SerieNueva  VARCHAR(20) DEFAULT NULL;
     DECLARE v_SerieActual VARCHAR(20) DEFAULT NULL;
     DECLARE CURVACIO	 INT DEFAULT 0;
      
     DECLARE Cur_Serie CURSOR FOR
     SELECT SERIE
     FROM   TBL_EQUIPOS
     WHERE  SERIE  = p_SERIE;
 
     DECLARE EXIT HANDLER FOR SQLEXCEPTION SET p_RESULTADO = 2;
     DECLARE CONTINUE HANDLER FOR NOT FOUND SET CURVACIO = 1;
 
     SET p_RESULTADO = 0;
     
     -- Validar que no exista la serie que env?an como par?metro
     SET CURVACIO = 0; 
		 OPEN Cur_Serie;
		 FETCH Cur_Serie INTO v_SerieNueva;
		 CLOSE Cur_Serie;
        
      IF (p_EQUIPO_ID = 0) THEN
          IF (v_SerieNueva IS NOT NULL) THEN
		          SET p_RESULTADO = 1;
	        ELSE		
              START TRANSACTION;
              INSERT INTO TBL_EQUIPOS(
                              NOMBRE_EQUIPO, 
                              MARCA,  
                              SERIE, 
                              LINEA,  
                              LUBRICACION, 
                              INGRESADOPOR, 
                              MODIFICADOPOR)
                              
                  VALUES(
                              UPPER(p_NOMBRE_EQUIPO), 
                              p_MARCA, 
                              UPPER(p_SERIE), 
                              p_LINEA, 
                              p_LUBRICACION, 
                              p_USUARIOCONECTADO, 
                              p_USUARIOCONECTADO);                              
                                                  
                              COMMIT;
          END IF;                    
      ELSE
          SELECT SERIE INTO v_SerieActual FROM TBL_EQUIPOS WHERE EQUIPO_ID = p_EQUIPO_ID;
			    IF ((v_SerieNueva IS NOT NULL) AND (v_SerieActual <> p_SERIE)) THEN
			         SET p_RESULTADO = 1;	  
	        ELSE		 
		          START TRANSACTION;
               UPDATE TBL_EQUIPOS SET             
               NOMBRE_EQUIPO      = UPPER(p_NOMBRE_EQUIPO),  
               MARCA              = p_MARCA, 
               SERIE              = UPPER(p_SERIE), 
               LINEA              = p_LINEA, 
               LUBRICACION        = p_LUBRICACION,
               MODIFICADOPOR      = p_USUARIOCONECTADO,
               FECHAMODIFICACION  = NOW()
               WHERE EQUIPO_ID    = p_EQUIPO_ID;
               
              COMMIT;
          END IF;                    
    END IF;               
                    
END; 

CREATE PROCEDURE SPR_IU_ListaValores(
IN p_LISTAVALORES_ID    INT(4),
IN p_NOMBRE             VARCHAR(50),
IN p_DESCRIPCION        VARCHAR(255),
IN p_TIPO               VARCHAR(50),
IN p_USUARIOCONECTADO   INT(4),
OUT p_RESULTADO         tinyint(1))
BEGIN
      DECLARE v_NombreNuevo  VARCHAR(50) DEFAULT NULL;
      DECLARE v_NombreActual VARCHAR(50) DEFAULT NULL;
      DECLARE CURVACIO	 INT DEFAULT 0;
      
      DECLARE Cur_Nombre CURSOR FOR
      SELECT NOMBRE
      FROM   TBL_LISTAVALORES
      WHERE  NOMBRE  = p_NOMBRE;
      
      DECLARE EXIT HANDLER FOR SQLEXCEPTION SET p_RESULTADO = 2;
      DECLARE CONTINUE HANDLER FOR NOT FOUND SET CURVACIO = 1;
 
      SET p_RESULTADO = 0;
      
      -- Validar que no exista el nombre que env?an como par?metro
      SET CURVACIO = 0;
      OPEN Cur_Nombre;
      FETCH Cur_Nombre INTO v_NombreNuevo;
      CLOSE Cur_Nombre;
          
      IF (p_LISTAVALORES_ID = 0) THEN
          IF (v_NombreNuevo IS NOT NULL) THEN
		          SET p_RESULTADO = 1;      
	        ELSE		       
              START TRANSACTION;
                INSERT INTO TBL_LISTAVALORES(                       
                            NOMBRE, 
                            DESCRIPCION, 
                            TIPO, 
                            INGRESADOPOR, 
                            MODIFICADOPOR)
                VALUES(
                            p_NOMBRE, 
                            p_DESCRIPCION, 
                            p_TIPO, 
                            p_USUARIOCONECTADO, 
                            p_USUARIOCONECTADO);
                            
              COMMIT;
          END IF;                
      ELSE
           SELECT NOMBRE INTO v_NombreActual FROM TBL_LISTAVALORES WHERE LISTAVALORES_ID = p_LISTAVALORES_ID;
           IF ((v_NombreNuevo IS NOT NULL) AND (v_NombreActual <> p_NOMBRE)) THEN
			         SET p_RESULTADO = 1;	  
	         ELSE		        
                START TRANSACTION;
                  UPDATE TBL_LISTAVALORES SET             
                  NOMBRE                 = p_NOMBRE,  
                  DESCRIPCION            = p_DESCRIPCION, 
                  MODIFICADOPOR          = p_USUARIOCONECTADO,
                  FECHAMODIFICACION      = NOW()
                  WHERE LISTAVALORES_ID  = p_LISTAVALORES_ID;
          
                COMMIT;
           END IF;   
           
        END IF;
             
END; 

CREATE PROCEDURE SPR_IU_Mantenimiento(
IN  p_MANTENIMIENTO_ID    INT(4),
IN  p_EQUIPO_ID           INT(4),
IN  p_OPERARIO_ID         INT(4),
IN  p_FECHA               DATE,
IN  p_OBSERVACIONES       VARCHAR(255),
IN  p_USUARIOCONECTADO    INT(4),
OUT p_RESULTADO           tinyint(1))
BEGIN
     
    DECLARE v_OperarioActual INT(4) DEFAULT 0;
    DECLARE v_OperarioNuevo  INT(4) DEFAULT 0 ;
    DECLARE v_Equipo         INT(4) DEFAULT 0 ;
    DECLARE v_FechaActual    DATE   DEFAULT NULL;
    DECLARE v_FechaNueva     DATE   DEFAULT NULL;
    DECLARE CURVACIO	       INT    DEFAULT 0;

    DECLARE Cur_Mantenimiento CURSOR FOR
    SELECT OPERARIO_ID, FECHA
    FROM TBL_MANTENIMIENTO 
    WHERE OPERARIO_ID = p_OPERARIO_ID 
    AND FECHA = p_FECHA;
    
    DECLARE Cur_Equipo CURSOR FOR
    SELECT EQUIPO_ID
    FROM TBL_MANTENIMIENTO 
    WHERE EQUIPO_ID = p_EQUIPO_ID; 
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION SET p_RESULTADO = 2;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET CURVACIO = 1;
  
    SET p_RESULTADO = 0;
    
    -- Validar que no exista el nombre que env?an como par?metro
	  SET CURVACIO = 0;
    OPEN Cur_Mantenimiento;
	  FETCH Cur_Mantenimiento INTO v_OperarioNuevo, v_FechaNueva;
	  CLOSE Cur_Mantenimiento;
    
      IF (p_MANTENIMIENTO_ID = 0) THEN
          IF ((v_OperarioNuevo <> 0)  AND (v_FechaNueva IS NOT NULL)) THEN 
		          SET p_RESULTADO = 1;
          ELSEIF (v_Equipo <> 0) THEN              
              SET p_RESULTADO = 2; 
		      ELSE  
                START TRANSACTION;
                INSERT INTO TBL_MANTENIMIENTO(
                            EQUIPO_ID, 
                            OPERARIO_ID, 
                            FECHA, 
                            OBSERVACIONES, 
                            INGRESADOPOR, 
                            MODIFICADOPOR)
                  VALUES(
                            p_EQUIPO_ID, 
                            p_OPERARIO_ID, 
                            p_FECHA, 
                            p_OBSERVACIONES, 
                            p_USUARIOCONECTADO,
                            p_USUARIOCONECTADO);
                              
                COMMIT;
          END IF;                     
      ELSE
            IF (v_OperarioNuevo <> 0) THEN
               SELECT OPERARIO_ID, FECHA  INTO v_OperarioActual, v_FechaActual 
               FROM TBL_MANTENIMIENTO 
               WHERE EQUIPO_ID = p_EQUIPO_ID;
               IF (v_OperarioActual <> p_OPERARIO_ID) THEN
                  SET p_RESULTADO = 1;
               ELSEIF ((v_OperarioActual = p_OPERARIO_ID) AND (v_FechaActual <> p_FECHA)) THEN
                      SET p_RESULTADO = 1; /*Modificaron fecha pero con el mismo Operario*/
               ELSE
                    START TRANSACTION;
                    UPDATE TBL_MANTENIMIENTO SET   
                    OPERARIO_ID            = p_OPERARIO_ID,
                    FECHA                  = p_FECHA,
                    OBSERVACIONES          = p_OBSERVACIONES,
                    FECHAMODIFICACION      = NOW()
                    WHERE MANTENIMIENTO_ID = p_MANTENIMIENTO_ID;   
                      
                    COMMIT;         
               END IF;     
            ELSE
                 START TRANSACTION;
                 UPDATE TBL_MANTENIMIENTO SET   
                 OPERARIO_ID            = p_OPERARIO_ID,
                 FECHA                  = p_FECHA,
                 OBSERVACIONES          = p_OBSERVACIONES,
                 FECHAMODIFICACION      = NOW()
                 WHERE MANTENIMIENTO_ID = p_MANTENIMIENTO_ID;   
                    
                 COMMIT;
         
            END IF; 
               
                               
      END IF;               
END; 

CREATE PROCEDURE SPR_R_BuscarRegistro(
IN p_TABLA      VARCHAR(20),
IN p_DATOBUSCAR INT(4))
BEGIN
       IF (p_TABLA = 'TBL_OPERARIOS') THEN
           SELECT OPERARIO_ID, DOCUMENTO, NOMBRES, APELLIDOS, TELEFONO, CORREO, FOTO FROM TBL_OPERARIOS WHERE OPERARIO_ID = p_DATOBUSCAR;          
       ELSEIF (p_TABLA = 'TBL_LISTAVALORES') THEN
               SELECT * FROM TBL_LISTAVALORES WHERE LISTAVALORES_ID = p_DATOBUSCAR;                   
       ELSEIF (p_TABLA = 'TBL_MANTENIMIENTO') THEN
               SELECT * FROM TBL_MANTENIMIENTO WHERE MANTENIMIENTO_ID = p_DATOBUSCAR;             
       ELSEIF (p_TABLA = 'TBL_EQUIPOS') THEN                           
               SELECT * FROM TBL_EQUIPOS WHERE EQUIPO_ID = p_DATOBUSCAR;   
      END IF;   
      
END; 

CREATE PROCEDURE SPR_IU_Operarios(
IN p_OPERARIO_ID              INT(4),
IN p_DOCUMENTO                varchar(10),
IN p_NOMBRES                  VARCHAR(25),
IN p_APELLIDOS                VARCHAR(25),
IN p_TELEFONO                 varchar(10),
IN p_CORREO                   VARCHAR(50),
IN p_FOTO                     VARCHAR(50),
IN p_USUARIOCONECTADO         INT(4),
OUT p_RESULTADO               tinyint(1))
BEGIN
      DECLARE v_Documento varchar(10) DEFAULT NULL;
      DECLARE CURVACIO	 INT DEFAULT 0;
      
      DECLARE Cur_Documento CURSOR FOR
      SELECT DOCUMENTO
      FROM   TBL_OPERARIOS
      WHERE  DOCUMENTO = p_DOCUMENTO;
      
      DECLARE EXIT HANDLER FOR SQLEXCEPTION SET p_RESULTADO = 2;
      DECLARE CONTINUE HANDLER FOR NOT FOUND SET CURVACIO = 1;
            
      SET p_RESULTADO = 0;
      
      IF (p_OPERARIO_ID = 0) THEN
          -- Validar que no exista el documento que envian como parametro
          SET CURVACIO = 0;
          OPEN Cur_Documento;
          FETCH Cur_Documento INTO v_Documento;
          CLOSE Cur_Documento;
          
          IF (v_Documento IS NOT NULL) THEN
              SET p_RESULTADO = 1; 
          ELSE  
              START TRANSACTION;
                INSERT INTO TBL_OPERARIOS(
                                DOCUMENTO, 
                                NOMBRES, 
                                APELLIDOS, 
                                TELEFONO, 
                                CORREO, 
                                CLAVE,                              
                                FOTO, 
                                INGRESADOPOR, 
                                MODIFICADOPOR)
                    VALUES(
                                p_DOCUMENTO, 
                                p_NOMBRES, 
                                p_APELLIDOS, 
                                p_TELEFONO, 
                                p_CORREO, 
                                AES_ENCRYPT(SUBSTR(p_DOCUMENTO, 1,6), 'simi2020'),                               
                                p_FOTO, 
                                p_USUARIOCONECTADO,
                                p_USUARIOCONECTADO);
                              
                COMMIT;  
          END IF;                   
      ELSE
            START TRANSACTION;
               UPDATE TBL_OPERARIOS SET             
               NOMBRES            = p_NOMBRES,  
               APELLIDOS          = p_APELLIDOS, 
               TELEFONO           = p_TELEFONO, 
               CORREO             = p_CORREO,
               FOTO               = p_FOTO,
               MODIFICADOPOR      = p_USUARIOCONECTADO,
               FECHAMODIFICACION  = now()
               WHERE OPERARIO_ID  = p_OPERARIO_ID; 
               
            COMMIT;
               
      END IF;      
END;
 
CREATE PROCEDURE SPR_R_CargarCombosListas(
  IN  p_TABLA  VARCHAR(30)
)
BEGIN
      IF (p_TABLA = 'PROGRAMACION') THEN
              SELECT E.EQUIPO_ID, CONCAT(E.NOMBRE_EQUIPO, " ", E.SERIE) AS EQUIPO, 'EQUIPOS' AS TIPO
              FROM  TBL_MANTENIMIENTO M
              INNER JOIN TBL_EQUIPOS E ON M.EQUIPO_ID=E.EQUIPO_ID
              UNION ALL(
              SELECT OPERARIO_ID, CONCAT(DOCUMENTO, " ", NOMBRES, " ", APELLIDOS) AS NOMBRECOMPLETO, 'OPERARIOS' FROM TBL_OPERARIOS)
              ORDER BY TIPO;
      ELSEIF (p_TABLA = 'PROGRAMAR') THEN 
              SELECT EQUIPO_ID, CONCAT(NOMBRE_EQUIPO, " ", SERIE) AS EQUIPO, 'EQUIPOS' AS TIPO 
              FROM  TBL_EQUIPOS
              WHERE     (NOT EXISTS
                          (SELECT     EQUIPO_ID
                            FROM      TBL_MANTENIMIENTO
                            WHERE     (TBL_EQUIPOS.EQUIPO_ID = EQUIPO_ID))) AND (LUBRICACION = 1)
              UNION ALL(
              SELECT OPERARIO_ID, CONCAT(DOCUMENTO, " ", NOMBRES, " ", APELLIDOS) AS NOMBRECOMPLETO, 'OPERARIOS' FROM TBL_OPERARIOS)
              ORDER BY TIPO;
      ELSEIF (p_TABLA = 'CONTROLEQUIPOS') THEN                   
              SELECT  LISTAVALORES_ID, NOMBRE, TIPO
              FROM TBL_LISTAVALORES              
              ORDER BY TIPO;                          
      END IF;     
END;
 
CREATE PROCEDURE SPR_R_ObtenerAcceso(
  IN p_DOCUMENTO  VARCHAR(10), 
  IN p_CLAVE      INT(6)
)
BEGIN
      SELECT OPERARIO_ID, NOMBRES, APELLIDOS, PERFIL
	  FROM tbl_operarios 
	  WHERE DOCUMENTO =  p_DOCUMENTO
      AND cast(aes_decrypt(CLAVE, 'simi2020') as char) = p_CLAVE Limit 1;   
END;

 
CREATE PROCEDURE SPR_R_CargarListado(
IN p_TABLA      VARCHAR(20),
IN p_CONDICION  VARCHAR(50))
BEGIN
      IF (p_TABLA = 'TBL_OPERARIOS') THEN
          IF (p_CONDICION <> '') THEN
               SELECT OPERARIO_ID, DOCUMENTO, CONCAT(NOMBRES, " ", APELLIDOS) AS NOMBRE_COMPLETO, TELEFONO, CORREO, FOTO FROM TBL_OPERARIOS WHERE DOCUMENTO = p_CONDICION;  
          ELSE
              SELECT OPERARIO_ID, DOCUMENTO, CONCAT(NOMBRES, " ", APELLIDOS) AS NOMBRE_COMPLETO, TELEFONO, CORREO, FOTO FROM TBL_OPERARIOS;  
          END IF;   
       ELSEIF (p_TABLA = 'TBL_EQUIPOS') THEN
                IF (p_CONDICION <> '') THEN                    
                    SELECT EQ.EQUIPO_ID, 
          							   EQ.SERIE,
          							   EQ.NOMBRE_EQUIPO,                           
          							   TV1.NOMBRE AS MARCA,
          							   TV2.NOMBRE AS LINEA,
          							   CASE
          									   WHEN EQ.LUBRICACION = 1 THEN 'SI'
          								 ELSE 'NO' 
          							   END AS LUBRICACION		
          							   FROM TBL_EQUIPOS EQ
          							   INNER JOIN TBL_LISTAVALORES TV1 ON TV1.LISTAVALORES_ID = EQ.MARCA 
          							   INNER JOIN TBL_LISTAVALORES TV2 ON TV2.LISTAVALORES_ID = EQ.LINEA 
          							   WHERE (NOT EXISTS
          							      	            (SELECT EQUIPO_ID
              									             FROM   TBL_MANTENIMIENTO
              									             WHERE  (EQ.EQUIPO_ID = EQUIPO_ID)));
                ELSE
                   SELECT EQ.EQUIPO_ID, 
          							  EQ.SERIE,
          							  EQ.NOMBRE_EQUIPO,                           
          							  TV1.NOMBRE AS MARCA,
          							  TV2.NOMBRE AS LINEA,
          							  CASE
          								    WHEN EQ.LUBRICACION = 1 THEN 'SI'
          								ELSE 'NO' 
          							  END AS LUBRICACION		
          							  FROM TBL_EQUIPOS EQ
          							  INNER JOIN TBL_LISTAVALORES TV1 ON TV1.LISTAVALORES_ID = EQ.MARCA 
          							  INNER JOIN TBL_LISTAVALORES TV2 ON TV2.LISTAVALORES_ID = EQ.LINEA 
          							  WHERE (NOT EXISTS
          							      	            (SELECT EQUIPO_ID
          									                 FROM   TBL_MANTENIMIENTO
          									                 WHERE  (EQ.EQUIPO_ID = EQUIPO_ID)));
                END IF; 
       ELSEIF (p_TABLA = 'MARCAS') THEN
                IF (p_CONDICION <> '') THEN                    
                    SELECT LISTAVALORES_ID, NOMBRE, DESCRIPCION, ' ', ' ' FROM TBL_LISTAVALORES WHERE TIPO = 'MARCAS' AND NOMBRE = p_CONDICION;                  
                ELSE
                    SELECT LISTAVALORES_ID, NOMBRE, DESCRIPCION, ' ', ' ' FROM TBL_LISTAVALORES WHERE TIPO = 'MARCAS';
                END IF;          
       ELSEIF (p_TABLA = 'LINEAS') THEN
                IF (p_CONDICION <> '') THEN                 
                    SELECT LISTAVALORES_ID, NOMBRE, DESCRIPCION, ' ', ' ' FROM TBL_LISTAVALORES WHERE TIPO = 'LINEAS' AND NOMBRE = p_CONDICION;
                ELSE
                    SELECT LISTAVALORES_ID, NOMBRE, DESCRIPCION, ' ', ' ' FROM TBL_LISTAVALORES WHERE TIPO = 'LINEAS';
                END IF;   	
       ELSEIF (p_TABLA = 'TBL_MANTENIMIENTO') THEN
                IF (p_CONDICION <> '') THEN
                    SELECT M.MANTENIMIENTO_ID, E.SERIE, E.NOMBRE_EQUIPO, M.FECHA, CONCAT(O.DOCUMENTO, " ", O.NOMBRES, " ", O.APELLIDOS) AS OPERARIO, ' ' 
                    FROM TBL_MANTENIMIENTO M
                    INNER JOIN TBL_EQUIPOS E ON E.EQUIPO_ID = M.EQUIPO_ID
                    INNER JOIN TBL_OPERARIOS O ON O.OPERARIO_ID = M.OPERARIO_ID
                    WHERE E.SERIE = p_CONDICION;
                ELSE
                    SELECT M.MANTENIMIENTO_ID, E.SERIE, E.NOMBRE_EQUIPO, M.FECHA, CONCAT(O.DOCUMENTO, " ", O.NOMBRES, " ", O.APELLIDOS) AS OPERARIO, ' '
                    FROM TBL_MANTENIMIENTO M
                    INNER JOIN TBL_EQUIPOS E ON E.EQUIPO_ID = M.EQUIPO_ID
                    INNER JOIN TBL_OPERARIOS O ON O.OPERARIO_ID = M.OPERARIO_ID;
                END IF;                        
      END IF;     
END;
 
CREATE PROCEDURE simidb.SPR_U_CambioClave(
 IN  p_OPERARIO_ID              INT(4), 
 IN  p_CLAVE_ANTERIOR           INT(6),   
 IN  p_CLAVE_NUEVA              INT(6),   
 OUT p_RESULTADO                tinyint(1))
BEGIN
      DECLARE v_DatoExiste INT(1) DEFAULT 0;
      
      DECLARE EXIT HANDLER
      FOR SQLEXCEPTION
         BEGIN            
             SET p_RESULTADO = -1;
             ROLLBACK;
         END;
      
      SET p_RESULTADO = 0;   
      
      SELECT COUNT(*) INTO v_DatoExiste
      FROM TBL_OPERARIOS 
	    WHERE OPERARIO_ID = p_OPERARIO_ID
      AND cast(aes_decrypt(CLAVE, 'simi2020') as char) = p_CLAVE_ANTERIOR;

      IF (v_DatoExiste = 0) THEN
          SET p_RESULTADO = 1;    
      ELSE
          START TRANSACTION;
          UPDATE TBL_OPERARIOS SET             
          CLAVE             = AES_ENCRYPT(p_CLAVE_NUEVA, 'simi2020'),
          MODIFICADOPOR     = p_OPERARIO_ID
          WHERE OPERARIO_ID = p_OPERARIO_ID;
          
          COMMIT;
      END IF;  
END;



